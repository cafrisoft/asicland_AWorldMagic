//-----------------------------------------------------------------------------
// File: VerilogGenerator.h
//-----------------------------------------------------------------------------
// Project: Kactus2
// Author: Janne Virtanen
// Date: 26.01.2017
//
// Description:
// Plugin for Verilog generation.
//-----------------------------------------------------------------------------

#ifndef VERILOGGENERATOR_H
#define VERILOGGENERATOR_H

//#include <KactusAPI/IGeneratorPlugin.h>
//#include <KactusAPI/CLIGenerator.h>

#include <Plugins/PluginSystem/GeneratorPlugin/GenerationControl.h>

class LibraryInterface;
class MessageMediator;

//-----------------------------------------------------------------------------
//! Plugin for structural Verilog generation.
//-----------------------------------------------------------------------------
class VerilogGenerator : public QObject/*, public IGeneratorPlugin, public CLIGenerator*/
{
    Q_OBJECT

//    Q_INTERFACES(IPlugin)
//    Q_INTERFACES(IGeneratorPlugin)

public:

	//! The constructor.
    VerilogGenerator(LibraryInterface* designInterface,
                     LibraryInterface* libraryInterface,
                     MessageMediator* messageChannel,
                     QString const& versionString,
                     QWidget *parent = 0);

	//! The destructor.
    virtual ~VerilogGenerator() = default;

    // Disable copying.
    VerilogGenerator(VerilogGenerator const& rhs) = delete;
    VerilogGenerator& operator=(VerilogGenerator const& rhs) = delete;

    /*!
     *  Returns the name of the plugin.
     */
    virtual QString getName() const;

    /*!
     *  Returns the version of the plugin.
     */
    virtual QString getVersion() const;

    /*!
     *  Returns the description of the plugin.
     */
    virtual QString getDescription() const;

    /*!
     *  Returns the vendor of the plugin.
     */
    virtual QString getVendor() const;

    /*!
     *  Returns the license of the plugin.
     */
    virtual QString getLicense() const;

    /*!
     *  Returns the license holder of the plugin.
     */
    virtual QString getLicenseHolder() const;

        /*!
     *  Checks whether the generator may run for the given component or design. 
     *
     *      @param [in] component	        The component for which to check support. If design is not null, component
	 *                                      will refer to design or designConfiguration.
     *      @param [in] design	            The design, if the generator is ran for a design.
     *      @param [in] designConfiguration The design configuration for design, if it is not null.
     *
     *      @return True, if the generator may run the given component. Otherwise false.
     */
    virtual bool checkGeneratorSupport(QSharedPointer<Component const> component,
        QSharedPointer<Design const> design,
        QSharedPointer<DesignConfiguration const> designConfiguration) const;

    /*!
     *  Runs the generation, creating new files and/or modifying the IP-XACT metadata. The function has
	 *  also access to the parent window widget, so that it can show dialogs for the user to aid the generation.
     *
     *      @param [in] utility			    The plugin utility interface.
     *      @param [in] component	        The component for which to check support. If design is not null, component
     *                                      will refer to design or designConfiguration.
     *      @param [in] design	            The design, if the generator is ran for a design.
     *      @param [in] designConfiguration The design configuration for design, if it is not null.
     */
    virtual void runGenerator(/*IPluginUtility* utility, */
        QSharedPointer<Component> component,
        QSharedPointer<Design> design,
        QSharedPointer<DesignConfiguration> designConfiguration);

    /*!
     *  Runs the generation, creating new files and/or modifying the IP-XACT metadata. The function has
     *  also access to the parent window widget, so that it can show dialogs for the user to aid the generation.
     *
     *      @param [in] utility			    The plugin utility interface.
     *      @param [in] component	        The component for which to check support. If design is not null, component
     *                                      will refer to design or designConfiguration.
     *      @param [in] design	            The design, if the generator is ran for a design.
     *      @param [in] designConfiguration The design configuration for design, if it is not null.
     */
    virtual void runGenerator(VLNV const& componentVLNV, QString const& viewName);

    /*!
     *  Gets the output format generated by the plugin.
     *
     *      @return The output file format generated by the plugin.
     */
//    virtual QString getOutputFormat() const override final;
    virtual QString getOutputFormat() const;

    /*!
      * Runs the generation.
      *
      *     @param [in] utility              Utilities for enabling plugin execution.
      *     @param [in] component            The component to run the generation for.
      *     @param [in] design               The design to run the generation for.
      *     @param [in] designConfiguration  The design configuration to run the generation for.
      *     @param [in] viewName             The component view name to run the generation for.
      *     @param [in] outputDirectory      The output directory for the generation results.
      */
//     virtual void runGenerator(IPluginUtility* utility,
//         QSharedPointer<Component> component,
//         QSharedPointer<Design> design,
//         QSharedPointer<DesignConfiguration> designConfiguration,
//         QString const& viewName,
//         QString const& outputDirectory) override final;
    virtual void runGenerator(/*IPluginUtility* utility,*/
        QSharedPointer<Component> component,
        QSharedPointer<Design> design,
        QSharedPointer<DesignConfiguration> designConfiguration,
        QString const& viewName,
        QString const& outputDirectory);

private:

    //-----------------------------------------------------------------------------
    // Data.
    //-----------------------------------------------------------------------------

    //! The last values used by the generation.
    GenerationSettings settings_;

    //! Design interface.
    LibraryInterface* designInterface_;

    //! The library interface.
    LibraryInterface* libraryInterface_;

    //! The channel for displaying messages to the user.
    MessageMediator* messageChannel_;

    //! The parent widget to use.
    QWidget* parentWidget_;

    //! The string denoting the current Kactus version.
    QString versionString_;
};

#endif // VERILOGGENERATOR_H
